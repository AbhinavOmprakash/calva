{
    "name": "clojure4vscode",
    "displayName": "Calva: Clojure & Clojurescript Interactive Programming",
    "description": "Integrated REPL, linting, inline eval and more for VSCode. Powered by Cider & nRepl.",
    "icon": "assets/calva.png",
    "version": "1.3.60",
    "publisher": "cospaia",
    "author": {
        "name": "Bettar Than Tomorrow",
        "email": "pez@pezius.com"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/BetterThanTomorrow/calva.git"
    },
    "license": "MIT",
    "engines": {
        "vscode": "^1.30.0"
    },
    "categories": [
        "Programming Languages",
        "Linters",
        "Formatters",
        "Other"
    ],
    "keywords": [
        "cider",
        "nrepl",
        "repl",
        "interactive programming"
    ],
    "galleryBanner": {
        "color": "#344D81",
        "theme": "dark"
    },
    "badges": [
        {
            "url": "https://img.shields.io/badge/clojurians--zulip-calva-brightgreen.svg?logo=zulip",
            "href": "https://clojurians.zulipchat.com/#narrow/stream/calva",
            "description": "Let's talk in the #calva stream of Clojurians Zulip"
        },
        {
            "url": "https://img.shields.io/badge/clojurians-calva--dev-blue.svg?logo=slack",
            "href": "https://clojurians.slack.com/messages/calva-dev/",
            "description": "Let's talk in the #calva-dev channel at the Clojurians Slack"
        }
    ],
    "activationEvents": [
        "onLanguage:clojure",
        "onCommand:calva.jackIn",
        "onCommand:calva.connect",
        "onCommand:calva.openCljReplWindow",
        "onCommand:calva.openCljsReplWindow",
        "onCommand:paredit.forwardSexp",
        "onCommand:paredit.backwardSexp",
        "onCommand:paredit.forwardDownSexp",
        "onCommand:paredit.backwardUpSexp",
        "onCommand:paredit.sexpRangeExpansion",
        "onCommand:paredit.sexpRangeContracrion",
        "onCommand:paredit.closeList",
        "onCommand:paredit.rangeForDefun",
        "onCommand:paredit.slurpSexpForward",
        "onCommand:paredit.slurpSexpBackward",
        "onCommand:paredit.barfSexpForward",
        "onCommand:paredit.barfSexpBackward",
        "onCommand:paredit.spliceSexp",
        "onCommand:paredit.splitSexp",
        "onCommand:paredit.killSexpForward",
        "onCommand:paredit.killSexpBackward",
        "onCommand:paredit.spliceSexpKillForward",
        "onCommand:paredit.spliceSexpKillBackward",
        "onCommand:paredit.deleteForward",
        "onCommand:paredit.deleteBackward",
        "onCommand:paredit.wrapAroundParens",
        "onCommand:paredit.wrapAroundSquare",
        "onCommand:paredit.wrapAroundCurly",
        "onCommand:paredit.indentRange",
        "onCommand:paredit.transpose"
    ],
    "main": "./out/calva/extension",
    "extensionPack": [
        "cospaia.calva-fmt",
        "cospaia.paredit-revived"
    ],
    "contributes": {
        "debuggers": [
            {
                "type": "clojure",
                "enableBreakpointsFor": {
                    "languageIds": [
                        "clojure"
                    ]
                }
            }
        ],
        "configuration": [
            {
                "type": "object",
                "title": "Calva",
                "properties": {
                    "clojure.format.enable": {
                        "type": "boolean",
                        "default": true,
                        "description": "Enable/disable calva-fmt as clojure formatter"
                    },
                    "calva.evalOnSave": {
                        "type": "boolean",
                        "default": true,
                        "description": "Run load-file when opening a new file and on file save"
                    },
                    "calva.lintOnSave": {
                        "type": "boolean",
                        "default": false,
                        "description": "Run joker-linting when opening a new file and on file save"
                    },
                    "calva.autoConnect": {
                        "type": "boolean",
                        "default": true,
                        "description": "Try to connect to nREPL on start using the .nrepl-port file"
                    },
                    "calva.testOnSave": {
                        "type": "boolean",
                        "default": true,
                        "description": "Run namespace tests when opening a new file and on file save"
                    },
                    "calva.syncReplNamespaceToCurrentFile": {
                        "type": "boolean",
                        "default": false,
                        "description": "Keeps the Terminal REPL's namespace in sync with the current file (if it has a valid clojure namespace form)"
                    },
                    "calva.connectREPLCommand": {
                        "type": "string",
                        "default": "lein repl :connect",
                        "description": "Shell command used by the 'Terminal REPL' to connect to the nREPL (host:port will be appended)"
                    },
                    "calva.startCLJSREPLCommand": {
                        "type": "string",
                        "default": "(do (require '[figwheel-sidecar.repl-api :as figwheel]) (figwheel/cljs-repl))",
                        "description": "Clojure command to start the ClojureScript REPL off of the Clojure REPL. (This setting is not used for shadow-cljs sessions)"
                    },
                    "calva.projectRootDirectory": {
                        "type": "string",
                        "default": ".",
                        "description": "The root directory of your Clojure project, relative to the Workspace root"
                    },
                    "calva.jokerPath": {
                        "type": "string",
                        "default": "joker",
                        "description": "Sets the path in which the Joker executable can be found"
                    },
                    "calva.useJokerOnWSL": {
                        "type": "boolean",
                        "default": false,
                        "description": "Specifies if Joker will run through WSL"
                    }
                }
            },
            {
                "title": "Paredit",
                "type": "object",
                "properties": {
                    "calva.paredit.defaultKeyMap": {
                        "type": "string",
                        "description": "The default keymap to use for bindings when there is no custom binding.",
                        "default": "original",
                        "enum": [
                            "original",
                            "strict",
                            "none"
                        ],
                        "scope": "window"
                    }
                }
            }
        ],
        "commands": [
            {
                "command": "calva.jackIn",
                "title": "Jack In",
                "category": "Calva"
            },
            {
                "command": "calva.openCljReplWindow",
                "title": "Open a Clojure REPL",
                "category": "Calva"
            },
            {
                "command": "calva.openCljsReplWindow",
                "title": "Open a ClojureScript REPL",
                "category": "Calva"
            },
            {
                "command": "calva.connect",
                "title": "Connect",
                "category": "Calva"
            },
            {
                "command": "calva.reconnect",
                "title": "Reconnect",
                "category": "Calva"
            },
            {
                "command": "calva.toggleCLJCSession",
                "title": "Toggle REPL connection used for CLJC files",
                "category": "Calva"
            },
            {
                "command": "calva.selectCurrentForm",
                "title": "Select current form",
                "category": "Calva"
            },
            {
                "command": "calva.clearInlineResults",
                "title": "Clear all inline display of evaluation results",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateSelection",
                "title": "Evaluate selection or current form",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateCurrentTopLevelForm",
                "title": "Evaluate current top level form",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateSelectionPrettyPrint",
                "title": "Evaluate selection or current form, and pretty print",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateCurrentTopLevelFormPrettyPrint",
                "title": "Evaluate current top level form, and pretty print",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateSelectionReplace",
                "title": "Evaluate selection or current form, and replace it with the result",
                "category": "Calva"
            },
            {
                "command": "calva.copyLastResults",
                "title": "Copy the result of last evaluation to the clipboard",
                "category": "Calva"
            },
            {
                "command": "calva.evaluateFile",
                "title": "Evaluate current file",
                "category": "Calva"
            },
            {
                "command": "calva.lintFile",
                "title": "Lint current file",
                "category": "Calva"
            },
            {
                "command": "calva.runNamespaceTests",
                "title": "Run tests for current namespace",
                "category": "Calva"
            },
            {
                "command": "calva.runAllTests",
                "title": "Run all tests",
                "category": "Calva"
            },
            {
                "command": "calva.rerunTests",
                "title": "Run previous tests again",
                "category": "Calva"
            },
            {
                "command": "calva.openREPLTerminal",
                "title": "Open REPL terminal",
                "category": "Calva"
            },
            {
                "command": "calva.loadNamespace",
                "title": "Load current namespace in REPL terminal",
                "category": "Calva"
            },
            {
                "command": "calva.setREPLNamespace",
                "title": "Switch namespace in current terminal REPL to namespace of this file",
                "category": "Calva"
            },
            {
                "command": "calva.evalCurrentFormInREPLTerminal",
                "title": "Evaluate current form (or selection) in REPL terminal",
                "category": "Calva"
            },
            {
                "command": "calva.evalCurrentTopLevelFormInREPLTerminal",
                "title": "Evaluate current top level form in REPL terminal",
                "category": "Calva"
            },
            {
                "command": "calva.recreateCljsRepl",
                "title": "Attach (or re-attach) a Clojurescript session",
                "category": "Calva"
            },
            {
                "category": "Paredit",
                "command": "paredit.toggle",
                "title": "Toggle"
            },
            {
                "category": "Paredit",
                "command": "paredit.forwardSexp",
                "title": "Forward Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.backwardSexp",
                "title": "Backward Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.forwardDownSexp",
                "title": "Down Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.backwardUpSexp",
                "title": "Up Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.closeList",
                "title": "Close List"
            },
            {
                "category": "Paredit",
                "command": "paredit.rangeForDefun",
                "title": "Select Current Top Level Form"
            },
            {
                "category": "Paredit",
                "command": "paredit.sexpRangeExpansion",
                "title": "Expand Selection"
            },
            {
                "category": "Paredit",
                "command": "paredit.sexpRangeContraction",
                "title": "Shrink Selection"
            },
            {
                "category": "Paredit",
                "command": "paredit.yankForwardSexp",
                "title": "Copy Forward Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.yankBackwardSexp",
                "title": "Copy Backward Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.yankForwardDownSexp",
                "title": "Copy Down Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.yankBackwardUpSexp",
                "title": "Copy Up Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.yankCloseList",
                "title": "Copy Close List"
            },
            {
                "category": "Paredit",
                "command": "paredit.yankRangeForDefun",
                "title": "Copy Current Top Level Form"
            },
            {
                "category": "Paredit",
                "command": "paredit.cutForwardSexp",
                "title": "Cut Forward Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.cutBackwardSexp",
                "title": "Cut Backward Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.cutForwardDownSexp",
                "title": "Cut Down Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.cutBackwardUpSexp",
                "title": "Cut Up Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.cutCloseList",
                "title": "Cut Close List"
            },
            {
                "category": "Paredit",
                "command": "paredit.cutRangeForDefun",
                "title": "Cut Select Current Top Level Form"
            },
            {
                "category": "Paredit",
                "command": "paredit.slurpSexpForward",
                "title": "Slurp Sexp Forward"
            },
            {
                "category": "Paredit",
                "command": "paredit.slurpSexpBackward",
                "title": "Slurp Sexp Backward"
            },
            {
                "category": "Paredit",
                "command": "paredit.barfSexpForward",
                "title": "Barf Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.barfSexpBackward",
                "title": "Barf Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.spliceSexp",
                "title": "Splice Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.splitSexp",
                "title": "Split Sexp"
            },
            {
                "category": "Paredit",
                "command": "paredit.killSexpForward",
                "title": "Kill Sexp Forward"
            },
            {
                "category": "Paredit",
                "command": "paredit.killSexpBackward",
                "title": "Kill Sexp Backward"
            },
            {
                "category": "Paredit",
                "command": "paredit.spliceSexpKillForward",
                "title": "Splice & Kill Forward"
            },
            {
                "category": "Paredit",
                "command": "paredit.spliceSexpKillBackward",
                "title": "Splice & Kill Backward"
            },
            {
                "category": "Paredit",
                "command": "paredit.deleteForward",
                "title": "Delete Forward"
            },
            {
                "category": "Paredit",
                "command": "paredit.deleteBackward",
                "title": "Delete Backward"
            },
            {
                "category": "Paredit",
                "command": "paredit.wrapAroundParens",
                "title": "Wrap Around ()"
            },
            {
                "category": "Paredit",
                "command": "paredit.wrapAroundSquare",
                "title": "Wrap Around []"
            },
            {
                "category": "Paredit",
                "command": "paredit.wrapAroundCurly",
                "title": "Wrap Around {}"
            },
            {
                "category": "Paredit",
                "command": "paredit.indentRange",
                "title": "Indent"
            },
            {
                "category": "Paredit",
                "command": "paredit.transpose",
                "title": "Transpose"
            }
        ],
        "keybindings": [
            {
                "command": "calva.connect",
                "key": "ctrl+alt+v c"
            },
            {
                "command": "calva.reconnect",
                "key": "ctrl+alt+v shift+c"
            },
            {
                "command": "calva.toggleCLJCSession",
                "key": "ctrl+alt+v alt+c"
            },
            {
                "command": "calva.recreateCljsRepl",
                "key": "ctrl+alt+v ctrl+r"
            },
            {
                "command": "calva.selectCurrentForm",
                "key": "ctrl+alt+v s"
            },
            {
                "command": "calva.clearInlineResults",
                "key": "escape",
                "when": "editorLangId == clojure && editorTextFocus && !editorReadOnly && !suggestWidgetVisible && !hasOtherSuggestions"
            },
            {
                "command": "calva.evaluateSelection",
                "key": "ctrl+alt+v e"
            },
            {
                "command": "calva.evaluateCurrentTopLevelForm",
                "key": "ctrl+alt+v space"
            },
            {
                "command": "calva.evaluateSelectionPrettyPrint",
                "key": "ctrl+alt+v p"
            },
            {
                "command": "calva.evaluateCurrentTopLevelFormPrettyPrint",
                "key": "ctrl+alt+v ctrl+alt+p"
            },
            {
                "command": "calva.evaluateSelectionReplace",
                "key": "ctrl+alt+v r"
            },
            {
                "command": "calva.copyLastResults",
                "key": "ctrl+alt+v ctrl+c"
            },
            {
                "command": "calva.evaluateFile",
                "key": "ctrl+alt+v enter"
            },
            {
                "command": "calva.lintFile",
                "key": "ctrl+alt+v l"
            },
            {
                "command": "calva.runNamespaceTests",
                "key": "ctrl+alt+v t"
            },
            {
                "command": "calva.runAllTests",
                "key": "ctrl+alt+v shift+t"
            },
            {
                "command": "calva.rerunTests",
                "key": "ctrl+alt+v ctrl+t"
            },
            {
                "command": "calva.openREPLTerminal",
                "key": "ctrl+alt+v z"
            },
            {
                "command": "calva.loadNamespace",
                "key": "ctrl+alt+v alt+n"
            },
            {
                "command": "calva.setREPLNamespace",
                "key": "ctrl+alt+v n"
            },
            {
                "command": "calva.evalCurrentFormInREPLTerminal",
                "key": "ctrl+alt+v alt+e"
            },
            {
                "command": "calva.evalCurrentTopLevelFormInREPLTerminal",
                "key": "ctrl+alt+v alt+space"
            },
            {
                "command": "paredit.forwardSexp",
                "key": "ctrl+right",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.forwardSexp",
                "key": "ctrl+right",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.backwardSexp",
                "key": "ctrl+left",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.backwardSexp",
                "key": "ctrl+left",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.forwardDownSexp",
                "key": "ctrl+down",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.forwardDownSexp",
                "key": "ctrl+down",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.backwardUpSexp",
                "key": "ctrl+up",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.backwardUpSexp",
                "key": "ctrl+up",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.closeList",
                "key": "ctrl+alt+right",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.closeList",
                "key": "ctrl+alt+right",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.rangeForDefun",
                "key": "ctrl+alt+w space",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.rangeForDefun",
                "key": "ctrl+alt+w space",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.sexpRangeExpansion",
                "key": "ctrl+w",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.sexpRangeExpansion",
                "key": "ctrl+w",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.sexpRangeContraction",
                "key": "ctrl+shift+w",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.sexpRangeContraction",
                "key": "ctrl+shift+w",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.yankForwardSexp",
                "key": "ctrl+alt+c ctrl+right",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.yankForwardSexp",
                "key": "ctrl+alt+c ctrl+right",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.yankBackwardSexp",
                "key": "ctrl+alt+c ctrl+left",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.yankBackwardSexp",
                "key": "ctrl+alt+c ctrl+left",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.yankForwardDownSexp",
                "key": "ctrl+alt+c ctrl+down",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.yankForwardDownSexp",
                "key": "ctrl+alt+c ctrl+down",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.yankBackwardUpSexp",
                "key": "ctrl+alt+c ctrl+up",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.yankBackwardUpSexp",
                "key": "ctrl+alt+c ctrl+up",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.yankCloseList",
                "key": "ctrl+alt+c ctrl+alt+right",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.yankCloseList",
                "key": "ctrl+alt+c ctrl+alt+right",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.yankRangeForDefun",
                "key": "ctrl+alt+c space",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.yankRangeForDefun",
                "key": "ctrl+alt+c space",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.cutForwardSexp",
                "key": "ctrl+alt+x ccutright",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.cutForwardSexp",
                "key": "ctrl+alt+x ccutright",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.cutBackwardSexp",
                "key": "ctrl+alt+x ccutleft",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.cutBackwardSexp",
                "key": "ctrl+alt+x ccutleft",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.cutForwardDownSexp",
                "key": "ctrl+alt+x ccutdown",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.cutForwardDownSexp",
                "key": "ctrl+alt+x ccutdown",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.cutBackwardUpSexp",
                "key": "ctrl+alt+x ccutup",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.cutBackwardUpSexp",
                "key": "ctrl+alt+x ccutup",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.cutCloseList",
                "key": "ctrl+alt+x ctrl+alt+right",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.cutCloseList",
                "key": "ctrl+alt+x ctrl+alt+right",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.cutRangeForDefun",
                "key": "ctrl+alt+x space",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.cutRangeForDefun",
                "key": "ctrl+alt+x space",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.slurpSexpForward",
                "key": "ctrl+alt+.",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.slurpSexpForward",
                "key": "ctrl+alt+.",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.slurpSexpBackward",
                "key": "ctrl+alt+shift+.",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.slurpSexpBackward",
                "key": "ctrl+alt+shift+.",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.barfSexpForward",
                "key": "ctrl+alt+,",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.barfSexpForward",
                "key": "ctrl+alt+,",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.barfSexpBackward",
                "key": "ctrl+alt+shift+,",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.barfSexpBackward",
                "key": "ctrl+alt+shift+,",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.spliceSexp",
                "key": "ctrl+alt+s",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.spliceSexp",
                "key": "ctrl+alt+s",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.splitSexp",
                "key": "ctrl+alt+shift+s",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.splitSexp",
                "key": "ctrl+alt+shift+s",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.killSexpForward",
                "key": "ctrl+delete",
                "mac": "ctrl+shift+backspace",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.killSexpForward",
                "key": "ctrl+delete",
                "mac": "ctrl+shift+backspace",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.killSexpBackward",
                "key": "ctrl+backspace",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.killSexpBackward",
                "key": "ctrl+backspace",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.spliceSexpKillForward",
                "key": "ctrl+alt+down",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.spliceSexpKillForward",
                "key": "ctrl+alt+down",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.spliceSexpKillBackward",
                "key": "ctrl+alt+up",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.spliceSexpKillBackward",
                "key": "ctrl+alt+up",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.wrapAroundParens",
                "key": "ctrl+alt+shift+9",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.wrapAroundParens",
                "key": "ctrl+alt+shift+9",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.wrapAroundSquare",
                "key": "ctrl+alt+[",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.wrapAroundSquare",
                "key": "ctrl+alt+[",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.wrapAroundCurly",
                "key": "ctrl+alt+shift+[",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.wrapAroundCurly",
                "key": "ctrl+alt+shift+[",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.indentRange",
                "key": "ctrl+alt+i",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/ && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "paredit.indentRange",
                "key": "ctrl+alt+i",
                "when": "calva:inRepl"
            },
            {
                "command": "paredit.deleteForward",
                "key": "delete",
                "mac": "shift+backspace",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap == strict && editorTextFocus && !editorReadOnly && !editorHasMultipleSelections"
            },
            {
                "command": "paredit.deleteBackward",
                "key": "backspace",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap == strict && editorTextFocus && !editorReadOnly && !editorHasMultipleSelections"
            },
            {
                "command": "deleteRight",
                "key": "ctrl+alt+delete",
                "mac": "alt+shift+backspace",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap == strict && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "deleteRight",
                "key": "ctrl+alt+delete",
                "mac": "alt+shift+backspace",
                "when": "calva:inRepl"
            },
            {
                "command": "deleteLeft",
                "key": "ctrl+alt+backspace",
                "when": "editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap == strict && editorTextFocus && !editorReadOnly"
            },
            {
                "command": "deleteLeft",
                "key": "ctrl+alt+backspace",
                "when": "calva:inRepl"
            }
        ],
        "menus": {
            "commandPalette": []
        }
    },
    "scripts": {
        "watch-ts": "concurrently \"tsc -watch -p ./\" \"npx webpack -w\"",
        "release": "npm i && tsc -p ./",
        "compile": "npm i && tsc -p ./",
        "vscode:prepublish": "npm run release",
        "postinstall": "node ./node_modules/vscode/bin/install"
    },
    "dependencies": {
        "@cospaia/calva-lib": "0.0.20",
        "@types/mocha": "^2.2.42",
        "@types/node": "^7.0.66",
        "clipboardy": "^1.2.3",
        "find": "0.2.9",
        "immutable": "3.8.1",
        "immutable-cursor": "2.0.1",
        "jsedn": "^0.4.1",
        "paredit.js": "^0.3.4",
        "jszip": "3.1.3",
        "lodash": "^4.17.10",
        "net": "1.0.2",
        "npm": "^6.4.0",
        "vscode-extension-telemetry": "0.0.15"
    },
    "devDependencies": {
        "@calva/repl-interactor": "0.0.8",
        "concurrently": "^4.1.0",
        "eslint": "^4.19.1",
        "eslint-config-standard": "^11.0.0",
        "eslint-plugin-import": "^2.12.0",
        "eslint-plugin-node": "^6.0.1",
        "eslint-plugin-promise": "^3.7.0",
        "eslint-plugin-standard": "^3.0.1",
        "ts-loader": "^5.3.3",
        "typescript": "^2.9.2",
        "vscode": "^1.1.26",
        "webpack": "^4.29.0",
        "webpack-cli": "^3.2.1"
    }
}
